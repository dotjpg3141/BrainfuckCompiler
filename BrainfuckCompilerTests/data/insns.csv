Name,Instructions,NOP ID,Cache Size,Input,Input Stack,Input Heap,Output,Output Stack,Output Heap,Comment
Print Char,printChar[],,16,,'A',,A,'A',,
Read Char,readChar[],,16,A,,,,'A',,
Print Int,printInt[],,16,,5,,5,5,,
Push Int,pushInt[5],,16,,,,,5,,
Pop Int,popInt[],,16,,3,,,,,
Dup Int,dupInt[],,16,,4,,,"4,4",,
"Swap Int, Int",swapInt[],,16,,"2,5",,,"5,2",,
Not - true,not[],,16,,3,,,0,,
Not - false,not[],,16,,0,,,1,,
Add,add[],,16,,"2,3",,,5,,
Sub,sub[],,16,,"3,2",,,1,,
Mul,mul[],,16,,"2,4",,,8,,
Div,div[],,16,,"10,5",,,2,,
"greater (a = 5, b = 3)",greater[],,16,,"5,3",,,1,,
"greater (a = 3, b = 5)",greater[],,16,,"3,5",,,0,,
"greater (a = 4, b = 4)",greater[],,16,,"4,4",,,0,,
Read Local: 1,readLocal[1],,16,,,5,,5,,
Read Local: 2,"readLocal[1,1]",,16,,,"2,3",,3,2,
Write Local: 1,writeLocal[1];,,16,,5,,,,5,
Write Local: 2,"writeLocal[1,1];",,16,,2,3,,,"3,2",
Write Local: Overwrite,writeLocal[1],,16,,2,4,,,2,
Move Over String: 2,"readLocal[5,1]",,32,,,"0,1,2,3,0,1",,1,"0,1,2,3,0",
Move Over String: 3,"readLocal[5,5,1]",,32,,,"0,1,2,3,0,0,4,5,6,0,1",,1,"0,1,2,3,0,0,4,5,6,0",
Clear Local (int),clearLocal[1];,,16,,,2,,,0,
Clear Local (empty int),clearLocal[1];,,16,,,0,,,0,
If Else - False,"ifElseBegin[];
  pushInt[11];
ifElseElse[];
  pushInt[22];
ifElseEnd[];",,16,,0,,,22,,
If Else - True,"""",,16,,1,,,11,,
FSM: No Case,"fsmBegin[0];
fsmEnd[];",,16,,,,,,,
FSM: Single Case,"fsmBegin[1];
  nop[0];
  fsmCase[];
    nop[1];
    pushInt[48];
    printChar[];
    popInt[];
    fsmJmp[2];
fsmEnd[];",,16,,,,0,,,
FSM: Single Case (after begin),"""",0,16,,,,,1,,
FSM: Single Case (after case),"""",1,16,,,,,,,
FSM: A > B,"fsmBegin[2];
  fsmCase[];
    pushInt[49];
    printChar[];
    popInt[];
    fsmJmp[2];
  fsmCase[];
    pushInt[50];
    printChar[];
    popInt[];
    fsmJmp[3];
fsmEnd[];",,16,,,,12,,,
FSM: A > B > C,"fsmBegin[3];
  fsmCase[];
    pushInt[49];
    printChar[];
    popInt[];
    fsmJmp[2];
  fsmCase[];
    pushInt[50];
    printChar[];
    popInt[];
    fsmJmp[3];
  fsmCase[];
    pushInt[51];
    printChar[];
    popInt[];
    fsmJmp[-1];
fsmEnd[];",,16,,,,123,,,
FSM: A > C > B,"fsmBegin[3];
  fsmCase[];
    pushInt[49];
    printChar[];
    popInt[];
    fsmJmp[3];
  fsmCase[];
    pushInt[50];
    printChar[];
    popInt[];
    fsmJmp[-1];
  fsmCase[];
    pushInt[51];
    printChar[];
    popInt[];
    fsmJmp[2];
fsmEnd[];",,16,,,,132,,,
FSM: Single Case (Stack Access),"pushInt[48];
fsmBegin[1];
  fsmCase[];
    printChar[];
    popInt[];
    fsmJmp[-1];
fsmEnd[];",,16,,,,0,,,
FSM: JumpIf: While 1,"fsmBegin[1];
  fsmCase[];
    pushInt[49];
    printChar[];
    readChar[];
    printChar[];
    sub[];
    fsmIf[-1,1];
fsmEnd[];",,16,0,,,10,,,
FSM: JumpIf: While 2,"""",,16,10,,,1110,,,
FSM: Call + Return (before call),"fsmBegin[3];
  fsmCase[];
    pushInt[50];
    nop[0];
    fsmCall[3];
  fsmCase[];
    nop[3];
    printChar[];
    popInt[];
    fsmJmp[-1];
  fsmCase[];
    nop[1];
    swapInt[];
    printChar[];
    popInt[];
    pushInt[33];
    swapInt[];
    nop[2];
    fsmReturn[];
fsmEnd[];",0,16,,,,,50,,"main(): // case 1 & 2
 $a = foo(50);
 print($a);

foo(x): // case 2
 print($x);
 return 33;"
FSM: Call + Return (after call),"""",1,16,,,,,"50,2",,
FSM: Call + Return (before return),"""",2,16,,,,2,"33,2",,
FSM: Call + Return (after return),"""",3,16,,,,2,33,,
FSM: Call + Return,"""",,16,,,,2!,,,
FSM: Recursion (0),"fsmBegin[6];
  fsmCase[];
    printInt[];
    pushInt[33];
    printChar[];
    popInt[];
    fsmCall[3];
  fsmCase[];
    printInt[];
    fsmJmp[-1];
  fsmCase[];
    swapInt[];
    dupInt[];
    fsmIf[4,6];
  fsmCase[];
    dupInt[];
    pushInt[1];
    sub[];
    fsmCall[3];
  fsmCase[];
    add[];
    fsmJmp[6];
  fsmCase[];
    swapInt[];
    fsmReturn[];
fsmEnd[];",,32,,0,,0!0,0,,"main(); // case 1 & 2
  printNum($x);
  print(33);
  print(sum($x));

sum(x): // case 3 - 6
  if $x != 0:
    $x = $x + sum($x - 1); // case 4 & 5
  return $x;"
FSM: Recursion (1),"""",,32,,1,,1!1,1,,
FSM: Recursion (3),"""",,32,,2,,2!3,3,,
FSM: Recursion (5),"""",,32,,5,,5!15,15,,
